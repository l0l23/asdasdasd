
<project name="plugin-builder" default="build">
  
  <!-- Specifying any property in the 'build.properties' file will cause the following -->
  <!-- properties to be written over. This file is a simple way to mark up properties  -->
  <!-- as 'key=value' (one per line).                                                  -->
  <property file="build.properties"/>
  
  <!-- This MUST be overwritten in the build.properties file. As an example, if your   -->
  <!-- plugin is named 'foo', then you will have this line in your build.properties:   -->
  <!--    plugin=foo                                                                   -->
  <property name="plugin" value="" />

  <property name="base" value="." />
  <property name="src" value="${base}/src/scripting" />
  <property name="cfg" value="${base}/src/cfg" />
  <property name="maps" value="${base}/src/maps" />
  <property name="build" value="${base}/build" />
  
  <!-- Dependencies (for the server; these folders map 1-1 with the server setup)      -->
  <property name="dependencies" value="${base}/dependencies" />
  <property name="configs" value="${dependencies}/maps/cfg" />
  <property name="missions" value="${dependencies}/missions" />
  <property name="addons" value="${dependencies}/addons" />
  
  <!-- Addons -->
  <property name="stripper" value="${addons}/stripper" />
  <property name="sourcemod" value="${addons}/sourcemod" />
  
  <!-- Sourcemod Specifics -->
  <property name="sm.extensions" value="${sourcemod}/extensions" />
  <property name="sm.gamedata" value="${sourcemod}/gamedata" />
  <property name="sm.plugins" value="${sourcemod}/plugins" />
  
  <!-- This MUST be overwritten in the build.properties file if you are going to use   -->
  <!-- dist to deploy to your local (testing) server. This should be the base of your  -->
  <!-- server (read: the folder with the 'addons' directory).                          -->
  <property name="dist" value="" />
  
  <property name="pluginName" value="${plugin}.main" />
  <property name="sourcePawn" value="${base}/bin/sourcepawn/spcomp.exe" />  
  
  <!--         -->
  <!-- PUBLICS -->
  <!--         -->
  
  <!-- Define some timestamps.  These are used to name the zip archive produced -->
  <!-- by this script, and to assign a version string for static assets.        -->
  <tstamp>
    <format property="TIMESTAMP_LONG" pattern="yyyy-MM-dd-hh-mm-ss" locale="en" />
    <format property="TIMESTAMP_SHORT" pattern="yyyyMMddhhmm" locale="en" />
  </tstamp>

  <!-- Compile the plugin; the dependee of the entire build/dist process -->
  <target name="compile" depends="-startDescription" description="Compiles the plugin">
    <exec executable="${sourcePawn}" failonerror="true">
      <arg line="-D${src} &quot;l4dready.sp&quot;" />
    </exec>
    <!-- 
    <exec executable="${sourcePawn}" failonerror="true">
      <arg line="-D${src} &quot;l4dscores.sp&quot;" />
    </exec>
     -->
    <exec executable="${sourcePawn}" failonerror="true">
      <arg line="-D${src} &quot;lerps.sp&quot;" />
    </exec>
    <exec executable="${sourcePawn}" failonerror="true">
      <arg line="-D${src} &quot;tankannounce.sp&quot;" />
    </exec>
    <exec executable="${sourcePawn}" failonerror="true">
      <arg line="-D${src} &quot;skeetannounce.sp&quot;" />
    </exec>
    <exec executable="${sourcePawn}" failonerror="true">
      <arg line="-D${src} &quot;rotoblin.main.sp&quot;" />
    </exec>
    <exec executable="${sourcePawn}" failonerror="true">
      <arg line="-D${src} &quot;${pluginName}.sp&quot;" />
    </exec>
  </target>
  
  <!-- Build the plugin and move it into the build dir; nothing fancy. -->
  <target name="build" depends="compile" description="Builds the plugin">
    <mkdir dir="${build}" />
    <move file="${src}/l4dready.smx" tofile="${build}/l4dready.smx" />
    <!-- <move file="${src}/l4dscores.smx" tofile="${build}/l4dscores.smx" /> -->
    <move file="${src}/lerps.smx" tofile="${build}/lerps.smx" />
    <move file="${src}/tankannounce.smx" tofile="${build}/tankannounce.smx" />
    <move file="${src}/skeetannounce.smx" tofile="${build}/skeetannounce.smx" />
    <!-- <copy file="${sm.plugins}/l4dscores.smx" tofile="${build}/l4dscores.smx" /> -->
    <move file="${src}/rotoblin.main.smx" tofile="${build}/rotoblin.smx" />
    <move file="${src}/${pluginName}.smx" tofile="${build}/${plugin}.smx" />
    <antcall target="-outputDescription">
      <param name="outputDir" value="${build}" />
    </antcall>
  </target>
  
  <!-- Builds and distributes the plugin to a destination server setup (including config files) -->
  <target name="dist" depends="compile" description="Builds and distributes the plugin">
    <move file="${src}/l4dready.smx" tofile="${dist}/addons/sourcemod/plugins/l4dready.smx" />
    <!-- <move file="${src}/l4dscores.smx" tofile="${dist}/addons/sourcemod/plugins/l4dscores.smx" /> -->
    <move file="${src}/lerps.smx" tofile="${dist}/addons/sourcemod/plugins/lerps.smx" />
    <move file="${src}/tankannounce.smx" tofile="${dist}/addons/sourcemod/plugins/tankannounce.smx" />
    <move file="${src}/skeetannounce.smx" tofile="${dist}/addons/sourcemod/plugins/skeetannounce.smx" />
    <!-- <copy file="${sm.plugins}/l4dscores.smx" tofile="${dist}/addons/sourcemod/plugins/l4dscores.smx" /> -->
    <move file="${src}/rotoblin.main.smx" tofile="${dist}/addons/sourcemod/plugins/rotoblin.smx" />
    <move file="${src}/${pluginName}.smx" toFile="${dist}/addons/sourcemod/plugins/${plugin}.smx" />
    <copy todir="${dist}/cfg/${plugin}">
      <fileset dir="${cfg}/${plugin}">
        <include name="**/*.cfg" />
      </fileset>
    </copy>
    <copy todir="${dist}/cfg">
      <fileset dir="${cfg}/rotoblin">
        <include name="**/*.cfg" />
      </fileset>
    </copy>
    <copy todir="${dist}/maps/cfg">
      <fileset dir="${maps}/cfg">
        <include name="**/*.cfg" />
      </fileset>
    </copy>
    <copy todir="${dist}/maps/cfg">
      <fileset dir="${configs}">
        <include name="**/*.cfg" />
      </fileset>
    </copy>
    <copy todir="${dist}/missions">
      <fileset dir="${missions}">
        <include name="**/*.txt" />
      </fileset>
    </copy>
    <copy todir="${dist}/addons/sourcemod/gamedata">
      <fileset dir="${sm.gamedata}">
        <include name="**/*.txt" />
      </fileset>
    </copy>
    <antcall target="-outputDescription">
      <param name="outputDir" value="${dist}/addons/sourcemod/plugins" />
      <param name="movedConfigs" value="true" />
    </antcall>
  </target>
  
  
  <!--          -->
  <!-- PRIVATES -->
  <!--          -->
    
  <!-- Ant does not support private targets, which is weird; however, Ant DOES support -->
  <!-- failing on client-called targets that start with a hyphen. Apparently, Ant will -->
  <!-- try and parse any target that starts with a hyphen as if it were a command line -->
  <!-- argument. As such, the 'privates' should start with a hyphen and have no        -->
  <!-- description (which will keep them from being shown to the user via 'and -p'.    -->
  
  <!-- Boilerplate for describing what is about to happen; called at the begining of the build process -->
  <target name="-startDescription">
    <echo>-------------------------------------------------------------------------------------</echo>
    <echo>- Building ${pluginName}.sp ...</echo>
    <echo>-------------------------------------------------------------------------------------</echo>
  </target>
  
  <!-- Boilerplate for describing what was done; called at the end of the build process -->
  <target name="-outputDescription">
    <echo>-------------------------------------------------------------------------------------</echo>
    <echo>- Built: l4dready.sp</echo>
    <echo>-    as: l4dready.smx</echo>
    <echo>-    in: ${outputDir}</echo>
    <echo>-</echo>
    <echo>- Built: lerps.sp</echo>
    <echo>-    as: lerps.smx</echo>
    <echo>-    in: ${outputDir}</echo>
    <echo>-</echo>
    <echo>- Built: rotoblin.sp</echo>
    <echo>-    as: rotoblin.smx</echo>
    <echo>-    in: ${outputDir}</echo>
    <echo>-</echo>
    <echo>- Built: ${pluginName}.sp</echo>
    <echo>-    as: ${plugin}.smx</echo>
    <echo>-    in: ${outputDir}</echo>
    <echo>-------------------------------------------------------------------------------------</echo>
  </target>
  
</project>
